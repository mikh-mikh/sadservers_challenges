Scenario: "Saskatoon": counting IPs.

Description: There's a web server access log file at /home/admin/access.log. The file consists of one line per HTTP request, with the requester's IP address at the beginning of each line.

Find what's the IP address that has the most requests in this file (there's no tie; the IP is unique). Write the solution into a file /home/admin/highestip.txt. For example, if your solution is "1.2.3.4", you can do echo "1.2.3.4" > /home/admin/highestip.txt

Test: The SHA1 checksum of the IP address sha1sum /home/admin/highestip.txt is 6ef426c40652babc0d081d438b9f353709008e93 (just a way to verify the solution without giving it away.)

Time to Solve: 15 minutes.

solution:

cat /home/admin/access.log | awk {'print $1'} | sort | uniq -cd | sort
echo "66.249.73.135" > /home/admin/highestip.txt 
sha1sum /home/admin/highestip.txt | grep 6ef426c40652babc0d081d438b9f353709008e93
   6ef426c40652babc0d081d438b9f353709008e93  /home/admin/highestip.txt

==============

Scenario: "Santiago": Find the secret combination

Description: Alice the spy has hidden a secret number combination, find it using these instructions:

1) Find the number of lines with occurrences of the string Alice (case sensitive) in the *.txt files in the /home/admin directory
2) There's a file where Alice appears exactly once. In that file, in the line after that "Alice" occurrence there's a number.
Write both numbers consecutively as one (no new line or spaces) to the solution file. For example if the first number from 1) is 11 and the second 22, you can do echo -n 11 > /home/admin/solution; echo 22 >> /home/admin/solution or echo "1122" > /home/admin/solution.

Test: Running md5sum /home/admin/solution returns d80e026d18a57b56bddf1d99a8a491f9(just a way to verify the solution without giving it away.)

Time to Solve: 15 minutes.

solution:

grep -R "Alice" /home/admin
grep -R "Alice" /home/admin/*.txt | wc -l
411

i just need to sort output by filename, but i didn't do it - i had seen needed file with once "Alice" by my eyes in ouput, it was file "1342-0.txt"

cat /home/admin/1342-0.txt | grep -A1 Alice
								Alice
                        156 CHARING CROSS ROAD
echo "411156" >> /home/admin/solution

md5sum /home/admin/solution | grep d80e026d18a57b56bddf1d99a8a491f9

=================

Scenario: "The Command Line Murders"

Description: This is the Command Line Murders with a small twist as in the solution is different

Enter the name of the murderer in the file /home/admin/mysolution, for example echo "John Smith" > ~/mysolution

Hints are at the base of the /home/admin/clmystery directory. Enjoy the investigation!

Test: md5sum ~/mysolution returns 9bba101c7369f49ca890ea96aa242dd5

(You can always see /home/admin/agent/check.sh to see how the solution is evaluated).

Time to Solve: 20 minutes.

solution:

this is a simpiest task for teaching how to cat and grep. 
i did not do this task, but i googled answer - the murder is "Joe Germuska"
for doing task you need go to /home/admin/clmystery dir and read instructions

echo "Joe Germuska" >> /home/admin/mysolution

md5sum ~/mysolution | grep 9bba101c7369f49ca890ea96aa242dd5

===================

Scenario: "Taipei": Come a-knocking

Level: Easy

Description: There is a web server on port :80 protected with Port Knocking. Find the one "knock" needed (sending a SYN to a single port, not a sequence) so you can curl localhost.

Test: Executing curl localhost returns a message with md5sum fe474f8e1c29e9f412ed3b726369ab65. (Note: the resulting md5sum includes the new line terminator: echo $(curl localhost))

1) check firts:
curl localhost
curl: (7) Failed to connect to localhost port 80: Connection refused

2) make knock.sh:

#! /bin/bash

for i in {0..65535} ; 
do
echo ${i}
knock localhost ${i}
done

chmod +x knock.sh

3) run knock.sh:
./knock.sh

4) check:
curl localhost
Who is there?

5) tap "check solution" button (there is a checker by running curl localhost and checking output)

===================

Scenario: "Resumable Server": Linux Upskill Challenge

Level: Easy

Description: This is a Debian 11 server without a challenge; it's for you to do as you please.

It's meant in principle for guided tutorials like the Linux Upskill Challenge, with some limitations (there's still no outgoing Internet access).

solution:
there is not a task - just debian 11 server for self-learning

===================

Scenario: "Lhasa": Easy Math

Description: There's a file /home/admin/scores.txt with two columns (imagine the first number is a counter and the second one is a test score for example).

Find the average (more precisely; the arithmetic mean: sum of numbers divided by how many numbers are there) of the numbers in the second column (find the average score).

Use exaclty two digits to the right of the decimal point. i. e., use exaclty two "decimal digits" without any rounding. Eg: if average = 21.349 , the solution is 21.34. If average = 33.1 , the solution is 33.10.

Save the solution in the /home/admin/solution file, for example: echo "123.45" > ~/solution

Tip: There's bc, Python3, Golang and sqlite3 installed in this VM.

Test: md5sum /home/admin/solution returns 6d4832eb963012f6d8a71a60fac77168 solution

solution:


================

Scenario: "Bilbao": Basic Kubernetes Problems

Description: There's a Kubernetes Deployment with an Nginx pod and a Load Balancer declared in the manifest.yml file. The pod is not coming up. Fix it so that you can access the Nginx container through the Load Balancer.

There's no "sudo" (root) access.

Test: Running curl 10.43.216.196 returns the default Nginx Welcome page.

See /home/admin/agent/check.sh for the test that "Check My Solution" runs.

Time to Solve: 10 minutes.

OS: Debian 11

solution:

bad manifest:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: localhost:5000/nginx
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: 2000Mi
            cpu: 100m
          requests:
            cpu: 100m
            memory: 2000Mi
      nodeSelector: 
        disk: ssd

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  clusterIP: 10.43.216.196
  type: LoadBalancer

